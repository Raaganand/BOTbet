# -*- coding: utf-8 -*-
"""Streamlit_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_pOM2tpFusAKD9nebWahWsfU4sshG3Np
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder, StandardScaler
import joblib
import streamlit as st

# Load the trained models and label encoders
rf_model = joblib.load('random_forest_model.pkl')
svm_model = joblib.load('svm_model.pkl')
team_encoder = joblib.load('team_encoder.pkl')
scaler = joblib.load('scaler.pkl')

# Define the original team names
home_team_name = st.text_input("Enter the name of the home team: ")
away_team_name = st.text_input("Enter the name of the away team: ")

# Add missing team names to the label encoder
team_encoder.classes_ = np.append(team_encoder.classes_, [home_team_name, away_team_name])

# Map the original team names to encoded values
home_team_encoded = team_encoder.transform([home_team_name])[0]
away_team_encoded = team_encoder.transform([away_team_name])[0]

# Create a DataFrame for prediction
prediction_data = pd.DataFrame({
    'HomeTeam': [home_team_encoded],
    'AwayTeam': [away_team_encoded],
    'Home_Score': [0],  # Example value, provide the actual home score
    'Away_Score': [0],  # Example value, provide the actual away score
    'Referee': [0]  # Example value, provide the actual referee encoded value
})

# Apply preprocessing steps to the prediction data
prediction_data = prediction_data.astype(float)  # Ensure data type is float

# Standardize the features using the pre-trained scaler
columns_to_standardize = ['Home_Score', 'Away_Score']
prediction_data[columns_to_standardize] = scaler.transform(prediction_data[columns_to_standardize])

# Make predictions using the ensemble model
rf_predictions = rf_model.predict(prediction_data)
svm_predictions = svm_model.predict(prediction_data)
ensemble_predictions = (rf_predictions + svm_predictions) // 2  # Voting/averaging

# Map the predicted values back to original labels
result_mapping = {0: 'Loss', 1: 'Win', 2: 'Draw'}
predicted_result = result_mapping[ensemble_predictions[0]]

# Print the predicted result
st.write(f"The predicted result for {home_team_name} vs {away_team_name} is: {predicted_result}")